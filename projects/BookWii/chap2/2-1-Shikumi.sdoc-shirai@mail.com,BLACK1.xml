<?xml version='1.0' encoding='Shift_JIS' ?>

<doc xml:lang='ja'>
<head>
<title>WiiRemoteをPCで利用するための仕組み</title>
<author>白井暁彦</author>
<date>2009年3月7日版</date>
<hp>http://akihiko.shirai.as/projects/BookWii/</hp>
<email>shirai@mail.com</email>

</head>
<body>

<!--
<figure id="fig:Layer1" src="eps/chap2/Layer1.eps" title="PCからのWiiRemote利用（階層構造）">
<attribute locale="latex2e" name="style">width:10cm</attribute>
</figure>
-->

ここでは、WiiRemoteをPCで利用するための仕組み、概念を説明します。
<subsubsection title="必要となるハードウェア">
まずは必要となるハードウェアを解説します。
<figure id="Wii-PC" src="png/Wii-PC.png" title="PCと接続するWiiRemote">
<attribute locale="latex2e" name="style">width:8cm</attribute>
</figure>

<dl>
 <dt>【WiiRemote】</dt>
 <dd>本書の主役、WiiRemoteです。この革新的なコントローラを使ってボタンや加速度センサー、赤外線座標といったデータを、PCにBluetoothによる高速通信経由で送ることができます。複数のWiiRemoteを同時使用できます。また図にはありませんが、拡張端子を使ってヌンチャクなどや様々な拡張コントローラーも利用できます。</dd>
 <dt>【センサーバー】</dt>
 <dd>2点の赤外線LEDによるマーカーが内蔵されており、WiiRemote先端の黒い部分にある特殊なセンサーによって座標として取得されます。標準のセンサバーは複数の赤外線LEDを集めて2グループの点にみえるように設計されています。赤外線は人間の目には見えません。</dd>

 <dt>【PC】</dt>
 <dd>本書のもうひとりの主役、パソコンです。プログラムを書いたり、ツールを使うことでWiiRemoteからのデータを受信したり、バイブレーターを動かしたりすることができます。本書はWindowsPCについて解説しますが、LinuxやMacOSでも利用できることがわかっています。</dd>

 <dt>【Bluetoothホストアダプタ】</dt>
 <dd>国際的な無線規格の標準であるBluetoothをPCで利用するためのアダプタで、PCのUSB端子などに取り付けたり、標準的に内蔵されていたりします。Bluetooth規格に準拠したマイクロプロセッサとアンテナで構成されています。</dd>
</dl>


もしお使いのPCが標準でBluetoothを装備しており、かつ後に紹介するWiiRemoteとの接続実験に成功するのであれば、新たに準備する必要はありません。PCにBluetoothホストアダプタが装備されていない場合には、PCパーツ店、電器店、通販等で購入してみてください。だいたい2,000円代ぐらいからUSBタイプのアダプタが入手可能です。WiiRemoteと通信を行うだけの目的であれば、最新・高級品である必要はありません。ただし、各種Bluetoothスタックによって接続に癖があるので注意が必要です(次章を参考にしてください)。

もしWii本体を持っていないのであれば、ゲームショップなどでWiiRemoteも調達しましょう。必要であればセンサーバーも任天堂ホームページで購入できますし、サードパーティから様々なセンサーバー互換品が発売されています。

</subsubsection>

<subsubsection title="ソフトウェア階層">
さて、次はソフトウェア階層です。「WiiRemoteをPCで利用する」といっても、C++などを使ってディープに開発したり、既にコンパイルされているツールを使ったり、Flashなどの外部のアプリケーションと連動させたりと、いろいろな方法があります。

<figure id="Layers" src="png/Layers.png" title="ソフトウェア階層">
<attribute locale="latex2e" name="style">width:8cm</attribute>
</figure>


下の層から「WindowsPC」、「Bluetoothスタック」、「API」と「Win32」、そして「アプリケーション／ツール」となっています。下に行くほどよりハードウェアに近く、上に行くほどよりアプリケーションに近いソフトウェアになります。


<dl>
 <dt>【WindowsPC】</dt>
 <dd>ここではPCハードウェアからOSの基本的な部分までを指します、「プラットフォーム」とも呼ばれます。他のプラットフォーム、例えばLinuxなどの場合は、OSが用意しているドライバを経由して、デバイスファイルへの読み書き関数だけでアクセスできる、といった環境もあるようです。</dd>

 <dt>【Bluetoothスタック】</dt>
 <dd>これは「Bluetoothホストアダプタ」と通信するソフトウェアです。接続されるBluetooth機器それぞれのクラス(モデム、ヒューマンインタフェース、ジョイスティック、ヘッドホンなど)に対するサービスを提供します。単に「ドライバ」と呼ぶこともできますが、Bluetoothの場合は各種Bluetooth機器に"積み重なる(スタック)"接続とサービスを管理する役割を持つので、通常「スタック」と呼びます。</dd>

 <dt>【HIDクラス】</dt>
 <dd>Bluetoothスタックは、接続するハードウェアにあわせて様々なクラスを提供します。WiiRemoteとの接続の場合、HID(ヒューマンインタフェースデバイス)というクラスを利用します。実はこのHIDクラスはUSB接続のマウスやキーボードと基本は同じ種類のものです。USBとBluetoothは無線と有線で異なりますが、ソフトウェア的には「Bluetooth接続であっても、基本的はHIDクラスに対して読み書きする」と覚えておくと余計なことを考えずにすみます。ディープにプログラミングをする方は、後に紹介するDDKのHIDクラスのサンプルやドキュメントを読んでみると勉強になるでしょう。</dd>

 <dt>【API／Win32】</dt>
 <dd>HIDクラス経由して、WiiRemoteとの通信をする部分です。「API(Application Programming Interface)」と表現していますが、アプリケーション開発のための便利なプログラミングインタフェース、クラス構築のためのコードです。世界のハッカーたちが「Wiimoteドライバ」など様々な呼称で呼び、数多くのオープンソースプロジェクトが開発されている部分です。加速度センサへのアクセスなど基本的な機能に的を絞ったもの、サウンド再生までサポートするような高機能なものなど様々存在します。</dd>

 <dt>【アプリケーション／ツール】</dt>
 <dd>この「アプリケーション／ツール層」が本書を手に取った皆さんが最も興味のある部分なのではないでしょうか？WiiRemoteをつかったゲームや、後に紹介するFlashFlashなどが他のプログラムと通信をする部分です。</dd>
</dl>

WindowsPCプラットフォームにおいて、APIは、突き詰めればWin32の関数、主にDDK(Driver Development Kit)やWDK(Windows Driver Kit、DDKにテストツールが統合された)を利用してコーディングされています。本書では、オープンソースで入手できるライブラリ類と、独自にAPIを開発するためのサンプルを解説します。

本書では、上記の各種APIを利用した様々なアプリケーションの書き方を紹介します。大きく分けると、C#.NETやC++を使った様々なアプリケーション、WiiFlashというBluetooth-ネットワーク間のプロクシを行うソフトウェアを使ったFlash上での利用、そしてWiiFlashの通信をProcessingで利用する例の4種類です。

もちろん他にもVisual BasicやPythonを使ってアプリケーション／ツールを開発することも可能ですが、本書では主として扱いません。
しかしWiiRemoteを使う上での基本は他の言語・環境でも変わりません。ゲームやアート作品など、アイディアを実現する上で「C++でなければダメ」ということはないのです！皆さんが得意としているOpenGLやSDL、DirectX、Win32やMFC、コマンドラインプログラムやC++/CLI、VB、C#、Java、Processing、各種スクリプト言語、そしてFlashやMaxMSPといった様々なツールやコンテンツクリエイション環境で利用することができることが報告されています。


</subsubsection>



以上のように「WiiRemoteをPCで利用する」とひとことで言っても、幅広く、全てを網羅するには深い部分の知識が必要になります。
特にグラフィックス中心としてきたゲームプログラマーにとっては、APIより下層のことを考えなければならない状況は少々苦しいかも知れません。ちょうど上の図もDirectXより下のGPU(グラフィックプロセッサ)を直接コールするようなイメージがあるでしょうか。しかし、WiiRemote登場当初に比べて、より安定して高機能なAPIが数多く登場していますし、なにより任天堂がコンシューマープラットフォームとして開発製造しているWiiRemoteは、非常に安定したハードウェアです。そういう意味でもWiiRemoteはデバイス・ハードウェア寄りのプログラミングを学ぶにはうってつけの環境とも言えるでしょう。

</body>
</doc>
