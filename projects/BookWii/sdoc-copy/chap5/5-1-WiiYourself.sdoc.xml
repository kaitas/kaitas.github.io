<?xml version='1.0' encoding='Shift_JIS' ?>

<doc xml:lang='ja'>
<head>
<title>WiiYourself!</title>
<author>白井暁彦</author>
<date>2008年10月6日版</date>
<hp>http://akihiko.shirai.as/projects/BookWii/</hp>
<email>shirai@mail.com</email>

</head>
<body>
WiiYourself!はgl.tter氏による、現在最も多機能なAPIです(http://gl.tter.org, 2008年6月時点の最新版はv1.00)。gl.tter氏は実際にFPS(一人称シューティング)ゲーム「GUN FRENZY!2」を制作するためにこのライブラリを作成しているようです。

<figure id="fig:wiiyourselfHP" src="png/wiiyourselfHP.png" title="WiiYourself!のホームページ">
</figure>

以下は、WiiYourself!のホームページに記載されている機能一覧です。

<ul>
<li>マルチWiiRemoteのサポート</li>
<li> ヌンチャク、クラシックコントロール、Guitar Hero周辺機器との信頼性のある接続</li>
<li> バッテリー、ボタン、加速度センサ、赤外線(4点)、トリガーとジョイスティック(死角込み)の読み込み</li>
<li> PitchとRollを含む方向推定</li>
<li> LEDと振動のセット(非同期動作機能付き)</li>
<li> 全てのBluetoothスタックのサポート(出力方法を自動検出)</li>
<li> (実験的)スピーカーサポート(矩形波とサンプリング再生)</li>
<li> ポーリングとコールバックのサポート</li>
<li> コネクションのロス、切断の検出</li>
<li> スムースなマルチタスク化スレッド</li>
<li> 豊富なデバッグ出力</li>
</ul>

WiiYourself!が他のAPIと一線を画している点として挙げられるのは、実験的ながらスピーカー出力と4点の赤外線の検出に成功している点でしょう。北米・欧州の多くの開発者が利用しています。APIコアの開発はgl.tter氏が集約的に行っていますが、メーリングリストでのディスカッションが比較的活発で、ギターコントローラーのサポートなども素早く行われました。今後もいろいろな発展が期待できるプロジェクトでしょう。

<subsection title="Readmeとライセンスの参考訳">
 <subsubsection title="【Readme.txt】">
これは完全に無料で完全機能の(現在は)Windows用のWiiRemoteネイティブC++ライブラリです。
Brian Peek氏の「Managed Wiimote Library」\cite{coding4fun}をもとに、完全に書き直し、拡張しました。

いまのところドキュメンテーションはありません。「WindowsでWiiRemote」の全容と一般的な
情報についてはBrianの書き込みをチェックしてください。ソースコードは広範囲にわたるコメントがあり、デモアプリは全てを理解する上で助けになるでしょう(難しくはないです)。質問については私のメーリングリストに参加してください。いくつかの使用における制限については「License.txt」を参照してください。

付記：

・VC 2005 C++のプロジェクトが含まれています(2008に読み込ませてください)。
リンクエラーを防ぐために、プロジェクトのプロパティ→C/C++→コード生成で「ランタイムライブラリ」の設定を適応させる必要があります。

・MinGW環境のためのMSYS makefileが含まれています。
MSYSプロンプトにおいて、「make -f Makefile.MSYS」と入力してください。MinGWという名前のフォルダと適切なフォルダ構造によるバイナリを生成します。

・ビルドにはマイクロソフトのDriver Development Kit(DDK)が必要となります(HID APIのため)。無料、登録の必要なしでダウンロードできます。
「Windows Server 2003 SP1 DDK」\cite{Windows2003DDK}

インクルードパスにDDKの「inc/wxp」を追加し、ライブラリパスに「lib/wxp/i386」を追加してください。（利点はないと思いますが）より最近のヘッダファイル、APIを含むWinDDKを使うこともできます。

・ライブラリはtchar.hでUnicode化可能です（VCプロパティのビルドオプション「U」をつけてあります）。

・VCを使っていないなら、以下のライブラリをリンクする必要があります。「setupapi.lib」、「winmm.lib」、「hid.lib(DDKから入手)」。


WiiRemoteインストールに関する付記：

WiiRemoteは使用したいPCに事前に「paired」の状態、つまりBluetooth接続された状態にある必要があります。1+2ボタンを同時に押しておくことで、数秒間、発見可能(discoverable)モードに入ります(LEDが点滅します、LEDの数はバッテリーレベルによる)。「Nintendo RVL-CNT-01」として発見されます。

スタック特有の解説：

・Windows標準装備のBluetoothスタック

(1)Bluetoothコントロールパネルを開きます。

(2)WiiRemoteの1+2ボタンを、インストールが終了するまで「押しっぱなしに」してください。そうしないと、WiiRemoteは手順の途中でタイムアウトしてしまいます。つまりいつまでたっても「connected」の状態にはなりません。

(3)新しいデバイスを追加してください。パスワードを使わなくても見つかるはずです。

(4)インストールが完全に終わったら、1+2ボタンから手を離してください。Bluetoothパネルに「connected」と表示されているはずです。

もし失敗したらアンインストールして、やり直してみてください。
その後、WiiRemoteとの接続を切断した場合、一度削除して再度インストールする必要があるようです(もしうまくいく方法を知っているなら教えてください)。

・Toshiba製スタック       

単純にWiiRemoteの1+2ボタンを押して、「New Connection」をクリックしてください。一度見つかれば、いつでもアイコンの右クリックと1+2ボタンを押しておくことで再接続可能です。デスクトップショートカットを作ってすぐに検出モードに入ることもできます。


・その他のスタック

上記と同様


・切断方法(各スタック共通)

WiiRemoteのPOWERボタンを数秒押してください。これで自動的に切断できます。(1+2ボタンを押して)再度ペアリングモードに入って、LEDが数秒点滅している状態でタイムアウトさせれば効果的に電源を切ることができます(訳注：この方法をとらないと次回接続時にペアリングに失敗することがあります)。

メーリングリストにサインアップして、フィードバックを与え、アイディアを交換し、参加するというループにいてください。

http://wiiyourself.gl.tter.org/todo.htm


もし貴方がWiiYourself!を使っているなら、是非教えてください。リンクを張らせていただきたいと思います。楽しんで！

gl.tter  (glATr-i-lDOTnet)


</subsubsection>
 <subsubsection title="【License.txt】">

ライセンス：私のWiiRemoteライブラリはいかなる利用に関しても、以下の条件において無料です。

(1)直接、間接にかかわらず人を傷つけるために使わないでください。軍事利用を含みますがそれに限ったことではありません(エゴを叩くのはいいことです・笑)。

(2)バイナリ形式（例：あなたのプログラムにリンクされた）のいかなる配布においてもいかにテキストをReadMeファイル、ヘルプファイル、AboutBoxやスプラッシュスクリーンに含めてください。

\fbox{
      contains WiiYourself! wiimote code by gl.tter\\

      http://gl.tter.org
} 

(3)ソースコード形式のどんな配布形式でも、オリジナルの著作権表示を変更なしに保持（追加することができます）、そしてこのライセンス文を含めてください（このファイルをあなたの配布物に含むか、あなた自身のライセンス文に貼り付けてください）。

(4)貴方自身がかなり書き直さない限り(例：他の言語にコンバートするなど、まず相談)、このコードを競合するライブラリを生み出す行為に使わないでください。

その代わり、後に新機能、バグフィックスやアイデアを提供してください。

gl.tter  (http://gl.tter.org | glATr-i-lDOTnet)


</subsubsection>
</subsection>
<subsection title="WiiYourself!付属デモのテストとリビルド">
まず、最新のWiiYourself!を入手します。

\fbox{http://wiiyourself.gl.tter.org/WiiYourself!\_1.0.zip}

ダウンロードしたら解凍し、まずはDemoフォルダにある「Demo.exe」を起動してみましょう。事前にWiiRemoteに接続しておくのを忘れずに。

\begin{figure}[htbp]
  \begin{center}
    \includegraphics[width=7cm,bb=0 0 482 351]{fig/WiiYourselfDemo.PNG}
  \end{center}
  \caption{WiiYourself!付属Demoのスクリーンショット}
  \label{fig:WiiYourselfDemo.PNG}
\end{figure}

一見、地味なデモに見えますが、実は多機能です。特にA,1,2ボタンを押すことでWiiRemoteのスピーカーから音が出ることを確認してください。高音質ではありませんが、音声が再生されています。

一通りの動作を試したら、次はリビルドです。
VC2008から、Demoフォルダにある「Demo.sln」(VC2005のソリューションファイル)を開きます。「Visual Studio変換ウィザード」が起動しますので、VC2008用のプロジェクトに変換してください。問題なく変換は終了するはずです。「Ctrl+Shift+B」でリビルドしてみてください。「include ファイルを開けません。'hidsdi.h': No such file or directory」というエラーが出れば正常です。これからDDKのディレクトリを設定します。

ソリューションエクスプローラーの「WiiYourself! lib」のアイコンの上で右クリックしてプロジェクトのプロパティページを開いてください。まず「構成」を「すべての構成」とし、「構成のプロパティ」→「C/C++」→「全般」の「追加のインクルード ディレクトリ」に「C:\WINDDK\3790.1830\inc\wxp」を設定、続いて、「ライブラリアン」→「全般」の「追加のライブラリ ディレクトリ」とプロジェクト(この場合Demo)のプロパティにて「リンカ」→「全般」→「追加のライブラリ ディレクトリ」に「C:\WINDDK\3790.1830\lib\wxp\i386」を設定してください。これで特に大きなエラーも出ずにリビルドに成功するはずです。

</subsection>

</body>
</doc>
